name: Build & Deploy
on:
  workflow_run:
    workflows: ["Create Release"]
    types:
      - completed

jobs:
  build:
    runs-on: [self-hosted, kazu-runners]
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: "Building Docker Image"
    outputs:
      short_sha: ${{ steps.short-sha.outputs.short_sha }}
    steps:
      - name: "checkout"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "set short_sha to output"
        id: short-sha
        shell: bash
        run: |
          echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name:  Get Release Version
        id: get-release-id
        shell: bash
        run: |
          echo "RELEASE_VERSION=$(git tag -l | sort -V | tail -n 1 )" >> $GITHUB_ENV

      - name: Check release version
        run: echo ${{ env.RELEASE_VERSION }}

      - name: Get package Version
        shell: bash
        run: |
          export TEMP_KAZU_VERSION=${{env.RELEASE_VERSION}}
          echo "KAZU_VERSION=${TEMP_KAZU_VERSION#v}" >> $GITHUB_ENV

      - name: download release
        shell: bash
        run: |
         gh release download --repo=https://github.com/AZ-AI/kazu/ ${{env.RELEASE_VERSION}} --pattern=kazu_model_pack_public* --dir deploy
        env:
         GH_TOKEN: ${{ github.token }}

      - name: Build
        uses: az-ai/az-action-registry@v4.0.1
        with:
          registry: ${{vars.REGISTRY}}
          username: ${{secrets.HARBOR_USERNAME}}
          password: ${{secrets.HARBOR_PASSWORD}}
          image-name: nlp/kazu/kazu-dev
          build-args: |
            BASE_IMAGE=${{vars.REGISTRY}}/bc-sai-test/python-amd:3.9
            ARTIFACTORY_URL=${{vars.ARTIFACTORY_URL}}
            ARTIFACTORY_USER=${{secrets.ARTIFACT_USERNAME}}
            ARTIFACTORY_TOKEN=${{secrets.ARTIFACT_TOKEN}}
            MODEL_PACK_PATH=kazu_model_pack_public-${{env.RELEASE_VERSION}}.zip
            MODEL_PACK_CONFIG_PATH="/model_pack/kazu_model_pack_public-${{env.RELEASE_VERSION}}"
            KAZU_VERSION=${{env.KAZU_VERSION}}
          build-context: ./deploy
          dockerfile-name: deploy/Dockerfile
          tag: ${{steps.short-sha.outputs.short_sha}}
          use-proxies: 'true'
          needs-sudo: 'true'

      - name: Clean up
        shell: bash
        run: |
          rm -rf deploy/kazu_model_pack*

  deploy-dev:
    name: "Deploy image to K8s Dev cluster"
    runs-on: [self-hosted, kazu-runners]
    needs: build
    steps:
      - name: "checkout"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name:  Get Release Version
        shell: bash
        run: |
          echo "RELEASE_VERSION=$(git tag -l | sort -V | tail -n 1 )" >> $GITHUB_ENV

      - name: Check release version
        run: echo ${{ env.RELEASE_VERSION }}

      - name: Get package Version
        shell: bash
        run: |
          export TEMP_KAZU_VERSION=${{env.RELEASE_VERSION}}
          echo "KAZU_VERSION=${TEMP_KAZU_VERSION#v}" >> $GITHUB_ENV

      - name: deploy to dev
        uses: az-ai/az-action-k8s-deploy-rest-api@0.6.2
        with:
          kube_config: ${{secrets.KUBE_CONFIG}}
          project_name: kazu
          ingress_name: kazu
          image:  ${{vars.REGISTRY}}/nlp/kazu/kazu-dev:${{needs.build.outputs.short_sha}}
          docker_registry: ${{vars.REGISTRY}}
          docker_username: ${{secrets.HARBOR_USERNAME}}
          docker_password: ${{secrets.HARBOR_PASSWORD}}
          namespace: kazu-test
          host_url: ${{vars.AZ_URL}}
          docker_email: "None"
          external_port: 80
          internal_port: 8080
          limits_memory: "14Gi"
          requests_memory: "12Gi"
          project_label: nlp
          env_label: test
          env_secrets: |
            KAZU_JWT_KEY=${{secrets.JWT_TOKEN}}
            CORS_ORIGIN_REGEX=https://kazu-ui.${{vars.AZ_URL}}
          replicas: 1
          enable_autoscaling: "yes"
          max_replicas: 2
          target_cpu_utilisation: 80
          run_tests: 'true'
          test_arguments: |
            run
            /data/config.json
            --env-var
            kazu_version=${{ env.KAZU_VERSION }}
            --env-var
            auth_token=${{secrets.KAZU_AUTH_KEY}}
            --env-var
            base_url=kazu.${{vars.AZ_URL}}
          test_image: ${{vars.REGISTRY}}/bc-sai-test/postman-kazu:0.0.1
          test_file_path: deploy/kazu-tests.postman_collection.json
          test_file_name: config.json
          test_path_to_mount: /data
